:::: {.application}

## Application 7b: remontée de messages par _logging_

::: {.panel-tabset group="logging"}
## Version utilisant `logging`

1. Aller sur la documentation de la librairie [ici](https://docs.python.org/3/howto/logging.html) et sur [ce tutoriel](https://realpython.com/python-logging/) pour trouver des sources d'inspiration sur la configuration et l'utilisation de `logging`.
2. Pour afficher les messages dans la console et dans un fichier de log, s'inspirer de [cette réponse](https://stackoverflow.com/a/46098711/9197726) sur _stack overflow_.
3. Tester en ligne de commande votre code et observer le fichier de _log_

## Version utilisant `loguru`

1. Installer `loguru` et l'ajouter au `requirements.txt`
2. En s'aidant du `README` du projet sur [`Github`](https://github.com/Delgan/loguru), remplacer nos `print` par différents types de messages (info, success, etc.).
3. Tester l'exécution du script en ligne de commande et observer vos sorties
4. Mettre à jour le logger pour enregistrer dans un fichier de _log_. Ajouter celui-ci au `.gitignore` puis tester en ligne de commande votre script. Ouvrir le fichier en question, refaites tourner le script et regardez son évolutoin.
5. Il est possible avec `loguru` de capturer les erreurs des fonctions grâce au système de cache décrit [ici](https://github.com/Delgan/loguru?tab=readme-ov-file#exceptions-catching-within-threads-or-main).
Introduire une erreur dans une des fonctions (par exemple dans `create_pipeline`) avec un code du type `raise ValueError("Problème ici")`

:::

::::

{{< checkpoint appli7 >}}
