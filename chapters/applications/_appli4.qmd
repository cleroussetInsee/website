Maintenant, revenons à notre chaine de production et appliquons des fonctions pour la rendre plus lisible, plus fiable et plus modulaire.

::: {.application}
## Application 4: adoption des standards de programmation fonctionnelle

Cette application peut être chronophage, vous pouvez aller plus ou moins
loin dans la fonctionalisation de votre script en fonction du temps dont vous
disposez.


* Créer une fonction qui intègre les différentes étapes du _pipeline_ (preprocessing et définition du modèle). Cette fonction prend
en paramètre le nombre d'arbres (argument obligatoire) et des arguments optionnels supplémentaires (les colonnes sur lesquelles s'appliquent les différentes étapes du _pipeline_, `max_depth` et `max_features`).
* Créer une fonction d'évaluation renvoyant le score obtenu et la matrice de confusion, à l'issue d'une estimation (mais cette estimation est faite en amont de la fonction, pas au sein de celle-ci)
- Déplacer toutes les fonctions ensemble, en début de script. Si besoin, ajouter des paramètres à votre fichier d'environnement pour créer de nouvelles variables comme les chemins des données.
- En profiter pour supprimer le code zombie qu'on a gardé jusqu'à présent mais qui ne correspond pas vraiment à des opérations utiles à notre chaine de production
:::


{{< checkpoint appli4 >}}
