::: {.application}
## Application 2: rendre lisible le script

- Diagnostiquer et évaluer la qualité de `titanic.py` avec [`PyLint`](https://pylint.readthedocs.io/en/latest/). Regarder la note obtenue.
- Utiliser `black titanic.py --diff --color` pour observer les changements de forme que va induire l'utilisation du _formatter_ [`Black`](https://black.readthedocs.io/en/stable/). Cette étape n'applique pas les modifications, elle ne fait que vous les montrer.
- Appliquer le _formatter_ [`Black`](https://black.readthedocs.io/en/stable/)
- Réutiliser [`PyLint`](https://pylint.readthedocs.io/en/latest/) pour diagnostiquer l'amélioration de la qualité du script et le travail qui reste à faire.
- Comme la majorité du travail restant est à consacrer aux imports:
    - Mettre tous les _imports_ ensemble en début de script
    - Retirer les _imports_ redondants en s'aidant des diagnostics de votre éditeur
    - Réordonner les _imports_ si [`PyLint`](https://pylint.readthedocs.io/en/latest/) vous indique de le faire
    - Corriger les dernières fautes formelles suggérées par [`PyLint`](https://pylint.readthedocs.io/en/latest/)
- Délimiter des parties dans votre code pour rendre sa structure plus lisible. Si des parties vous semblent être dans le désordre, vous pouvez réordonner le script (mais n'oubliez pas de le tester)

<!-----
Temps test Julien: 22mn
------>
:::

::: {.callout-caution collapse="true"}
## Checkpoint post appli2

```{.python filename="terminal"}
curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh #<1>
./update.sh appli2 #<2>
rm -f update.sh #<3>
```

1. Récupérer le script de _checkpoint_
2. Avancer à l'état à l'issue de l'application 2
3. Nettoyer derrière nous

![](/checkpoint.jpg){width=80% fig-align="center"}

:::


